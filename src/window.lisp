(in-package :glide)

;; input-modes 
(defclass glide-window ()
  ((widget
    :reader widget
    :initarg :widget)
   (input-mode
    :reader input-mode
    :initarg :input-mode)
   (input-state
    :reader input-state
    :initform nil)))


(defmethod initialize-instance :after ((window glide-window) &key widget input-mode)
  (declare (ignore widget input-mode))
  (with-slots (input-state input-mode) window
    (setf input-state
          (make-instance 'input-mode-state :input-mode input-mode))))


(defclass input-mode ()
  ((table
    :reader input-table)))


(defclass input-mode-state ()
  ((input-mode
    :initarg :input-mode)
   (accum
    :initform nil)
   (current-value
    :accessor current-value
    :initform '(nil . nil))
   (current-state
    :initform :neutral
    :documentation
    "State of the state-machine - can be one of:
  (:netural :valid :partial)"))
  (:documentation "The input mode state is based on a state-machine"))


(defmethod initialize-instance ((mode input-mode) &key table)
  (with-slots ((result table)) mode
    (setf result (make-input-table table)))
  (call-next-method))


(defun reset (state)
  (with-slots (input-mode accum current-value current-state) state
    (setf accum "")
    (setf current-value nil)1i
    (setf current-state :neutral)))


(defun step-input-state (state key)
  (with-slots (input-mode accum current-value current-state) state
    ;; next = nil OR (maybe char . maybe hash-table) 
    (let ((next (gethash (code-char key)
                         (or (and current-value (cdr current-value))
                             (input-table input-mode)))))

      ;; specific case: we know that this is terminating!
      (if (and next (car next) (not (cdr next)))
          (progn (reset state) (cons :release-valid (car next)))
        (progn
          (setf accum (concatenate 'string accum (string (code-char key))))
          (when next (setf current-value next))
          (ccase current-state
                 (:neutral (when next
                             (progn
                               (if (car next)
                                   (setf current-state :valid)
                                 (setf current-state :partial))
                               (cons :new-seq (car next)))))
                 (:partial (if next
                               (progn
                                 (when (car next) (setf current-state :valid))
                                 (setf current-value next)
                                 (cons :cont-seq (car next)))
                             (let ((ret-str accum))
                               (reset state)
                               (cons :release-invalid ret-str))))
                 (:valid (if next
                             (progn
                               (unless (car next) (setf current-state :partial))
                               (setf current-value next)
                               (cons :cont-seq (car next)))
                           (progn
                             (let ((ret-char (car current-value)))
                               (reset state)
                               (cons :release-valid ret-char)))))))))))


(defun on-keypress (window keyval keycode)
  (declare (ignore keycode))
  (if (< keyval (expt 2 15))
    (let ((result (step-input-state (input-state window) keyval)))
      (if result
          (progn
            (ccase (car result)
              (:new-seq nil)
              (:cont-seq nil)
              (:release-valid
               (text-buffer-insert-at-cursor
                (text-view-buffer (widget window))
                (string (cdr result))
                (utf-8-byte-length (string (cdr result)))))
              (:release-invalid
               (text-buffer-insert-at-cursor
                (text-view-buffer (widget window))
                (cdr result)
                (length (cdr result)))))
            t)))
    nil))


(defun make-input-table (input-table-source)
  (let ((table (make-hash-table)))
    (iter (for (str . output) in input-table-source)
          (for tmp = table)
          (for stack = (map 'list (lambda (x) x) str))
      (iter (while stack)
        (let* ((char (pop stack))
               (result (gethash char tmp)))
          (cond
            ;; case: char ‚Üí (_ . table) & we want to updated table
            ((and stack result (cdr result))
             (setf tmp (cdr (gethash char tmp))))
            ;; case: char ‚Üí (_ . nil) & we want to add table
            ((and stack result)
             (setf (gethash char tmp)
                   (cons (car result) (make-hash-table)))
             (setf tmp (cdr (gethash char tmp))))
            ;; case: char ‚Üí nil & we want to add table
            (stack
             (setf (gethash char tmp) (cons nil (make-hash-table)))
             (setf tmp (cdr (gethash char tmp))))

            ;; case: char ‚Üí (_ . _) we want to add char
            (result
             (setf (gethash char tmp) (cons output (cdr result))))
            ;; case char ‚Üí nil and we ant to add char
            (t
             (setf (gethash char tmp) (cons output nil)))))))
    table))


;(defvar +none+ )
(defvar +unicode-input-mode+
  (make-instance
   'input-mode
   :table
   '(;; brackets
        (";<" . #\‚ü®)
        (";>" . #\‚ü©)
        (";[" . #\‚¶ó)
        (";]" . #\‚¶ò)
        (";{" . #\‚¶É)
        (";}" . #\‚¶Ñ)
        (";<<" . #\‚ßº)
        (";>>" . #\‚ßΩ)

        ;; arrows
        (";to"  . #\‚Üí)
        (";fm"  . #\‚Üê)
        (";up"  . #\‚Üë)
        (";dn"  . #\‚Üì)
        (";To"  . #\‚áí)
        (";Fm"  . #\‚áê)
        (";Up"  . #\‚áë)
        (";Dn"  . #\‚áì)
        (";mto" . #\‚Ü¶)
        (";mfm" . #\‚Ü§)
        (";mup" . #\‚Ü•)
        (";mdn" . #\‚Üß)

        ;; logic and sets
        (";fa"   . #\‚àÄ)
        (";ex"   . #\‚àÉ)
        (";in"   . #\‚àà)
        (";u"    . #\‚à™)
        (";n"    . #\‚à©)
        (";c_"   . #\‚äÜ)
        (";~c_"  . #\‚äá)
        (";!c_"  . #\‚äà)
        (";!~c_" . #\‚äâ)
        (";c"    . #\‚äÇ)
        (";~c"   . #\‚äÉ)

        ;; combinators
        (";o" . #\‚àò)
        (";O" . #\‚óã)
        (";|-" . #\‚ä¢)
        (";-|" . #\‚ä£)
        (";-o" . #\‚ä∏)
        (";o-" . #\‚üú)
        (";|\\" . #\·ö≥)

        ;; numeric & algebraic operations 
        (";:-" . #\√∑)
        (";x"  . #\‚úï)
        (";*"  . #\‚ãÖ)
        (";^"  . #\‚àß)
        (";-^" . #\‚äº)
        (";v"  . #\‚à®)
        (";-v" . #\‚äΩ)
        (";v-" . #\‚äª)
        (";-." . #\¬¨)

        ;; array transfomrations & operations
        (";O/"  . #\‚àÖ) ;; nul
        (";O|"  . #\‚åΩ)
        (";O-"  . #\‚äñ)
        (";O\\" . #\‚çâ)
        (";.."  . #\¬®)
        (";..." . #\‚Ä¶)

        ;; equality & comparisons
        (";^=" . #\‚âú)
        (";==" . #\‚â°)
        (";#\=" . ?‚âü)
        (";o=" . #\‚âó)
        (";~=" . #\‚âÖ)
        (";>=" . #\‚â•)
        (";!=" . #\‚â†)
        (";<=" . #\‚â§)

        ;; Subscripts
        (";_0" . #\‚ÇÄ)
        (";_1" . #\‚ÇÅ)
        (";_2" . #\‚ÇÇ)
        (";_3" . #\‚ÇÉ)
        (";_4" . #\‚ÇÑ)
        (";_5" . #\‚ÇÖ)
        (";_6" . #\‚ÇÜ)
        (";_7" . #\‚Çá)
        (";_8" . #\‚Çà)
        (";_9" . #\‚Çâ)
        (";_=" . #\‚Çå)
        (";_-" . #\‚Çã)
        (";_+" . #\‚Çä)
        (";_a" . #\‚Çê)
        (";_e" . #\‚Çë)
        (";_h" . #\‚Çï)
        (";_i" . #\·µ¢)
        (";_j" . #\‚±º)
        (";_l" . #\‚Çó)
        (";_m" . #\‚Çò)
        (";_n" . #\‚Çô)
        (";_o" . #\‚Çí)
        (";_p" . #\‚Çö)
        (";_r" . #\·µ£)
        (";_s" . #\‚Çõ)
        (";_t" . #\‚Çú)
        (";_u" . #\·µ§)
        (";_v" . #\·µ•)
        (";_x" . #\‚Çì)


        ;; Superscripts
        (";^0" . #\‚Å∞)
        (";^1" . #\1)
        (";^2" . #\¬≤)
        (";^3" . #\¬≥)
        (";^4" . #\‚Å¥)
        (";^5" . #\‚Åµ)
        (";^6" . #\‚Å∂)
        (";^7" . #\‚Å∑)
        (";^8" . #\‚Å∏)
        (";^9" . #\‚Åπ)
        (";^=" . #\‚Åº)
        (";^-" . #\‚Åª)
        (";^+" . #\‚Å∫)


        ;; greek
        (";ga" . #\Œ±)
        (";gb" . #\Œ≤)
        (";gc" . #\œà)
        (";gd" . #\Œ¥)
        (";ge" . #\Œµ)
        (";gf" . #\œÜ)
        (";gg" . #\Œ≥)
        (";gh" . #\Œ∑)
        (";gi" . #\Œπ)
        (";gj" . #\Œæ)
        (";gk" . #\Œ∫)
        (";gl" . #\Œª)
        (";gm" . #\Œº)
        (";gn" . #\ŒΩ)
        (";go" . #\Œø)
        (";gp" . #\œÄ)
        (";gr" . #\r)
        (";gs" . #\œÉ)
        (";gt" . #\œÑ)
        (";gu" . #\Œ∏)
        (";gv" . #\œâ)
        (";gw" . #\œÇ)
        (";gx" . #\œá)
        (";gy" . #\œÖ)
        (";gz" . #\Œ∂)

        (";gA" . #\Œë)
        (";gB" . #\Œí)
        (";gC" . #\Œ®)
        (";gD" . #\Œî)
        (";gE" . #\Œï)
        (";gF" . #\Œ¶)
        (";gG" . #\Œì)
        (";gH" . #\Œó)
        (";gI" . #\Œô)
        (";gJ" . #\Œû)
        (";gK" . #\Œö)
        (";gL" . #\Œõ)
        (";gM" . #\Œú)
        (";gN" . #\Œù)
        (";gO" . #\Œü)
        (";gP" . #\Œ†)
        (";gR" . #\R)
        (";gS" . #\Œ£)
        (";gT" . #\Œ§)
        (";gU" . #\Œò)
        (";gV" . #\Œ©)
        (";gW" . #\Œ£)
        (";gX" . #\Œß)
        (";gY" . #\Œ•)
        (";gZ" . #\Œñ)

        
        ;; double-struck letters
        (";sA" . #\ùî∏)
        (";sB" . #\ùîπ)
        (";sC" . #\‚ÑÇ)
        (";sD" . #\ùîª)
        (";sE" . #\ùîº)
        (";sF" . #\ùîΩ)
        (";sG" . #\ùîæ)
        (";sH" . #\‚Ñç)
        (";sI" . #\ùïÄ)
        (";sJ" . #\ùïÅ)
        (";sK" . #\ùïÇ)
        (";sL" . #\ùïÉ)
        (";sM" . #\ùïÑ)
        (";sN" . #\‚Ñï)
        (";sO" . #\ùïÜ)
        (";sP" . #\‚Ñô)
        (";sQ" . #\‚Ñö)
        (";sR" . #\‚Ñù)
        (";sS" . #\ùïä)
        (";sT" . #\ùïã)
        (";sU" . #\ùïå)
        (";sV" . #\ùïç)
        (";sW" . #\ùïé)
        (";sX" . #\ùïè)
        (";sY" . #\ùïê)
        (";sZ" . #\‚Ñ§)

        ;; script/fancy letters
        (";ca" . #\ùí∂)
        (";cb" . #\ùí∑)
        (";cc" . #\ùí∏)
        (";cd" . #\ùíπ)
        (";ce" . #\‚ÑØ)
        (";cf" . #\ùíª)
        (";cg" . #\‚Ñä)
        (";ch" . #\ùíΩ)
        (";ci" . #\ùíæ)
        (";cj" . #\ùíø)
        (";ck" . #\ùìÄ)
        (";cl" . #\ùìÅ)
        (";cm" . #\ùìÇ)
        (";cn" . #\ùìÉ)
        (";co" . #\‚Ñ¥)
        (";cp" . #\ùìÖ)
        (";cq" . #\ùìÜ)
        (";cr" . #\ùìá)
        (";cs" . #\ùìà)
        (";ct" . #\ùìâ)
        (";cu" . #\ùìä)
        (";cv" . #\ùìã)
        (";cw" . #\ùìå)
        (";cx" . #\ùìç)
        (";cy" . #\ùìé)
        (";cz" . #\ùìè)

        (";cA" . #\ùíú)
        (";cB" . #\‚Ñ¨)
        (";cC" . #\ùíû)
        (";cD" . #\ùíü)
        (";cE" . #\ùìî)
        (";cF" . #\ùìï)
        (";cG" . #\ùí¢)
        (";cH" . #\‚Ñã)
        (";cI" . #\‚Ñê)
        (";cJ" . #\ùí•)
        (";cK" . #\ùí¶)
        (";cL" . #\‚Ñí)
        (";cM" . #\‚Ñ≥)
        (";cN" . #\ùí©)
        (";cO" . #\ùí™)
        (";cP" . #\ùí´)
        (";cQ" . #\ùí¨)
        (";cR" . #\‚Ñõ)
        (";cS" . #\ùíÆ)
        (";cT" . #\ùíØ)
        (";cU" . #\ùí∞)
        (";cV" . #\ùí±)
        (";cW" . #\ùí≤)
        (";cX" . #\ùí≥)
        (";cY" . #\ùí¥)
        (";cZ" . #\ùíµ))))
